@page "/cargar-inmueble"
@rendermode InteractiveServer
@inject NavigationManager Nav

@using System.Security.Claims
@inject IRepositorioInmueble RepositorioInmueble
@inject CasoDeUsoAltaInmueble CasoDeUsoAltaInmueble
@using Microsoft.AspNetCore.Authorization
@using Alquileres_Express.Aplicacion.Enumerativo
@inject IConfiguration config
@inject IHttpContextAccessor HttpContextAccessor
@inject IRepositorioFoto RepositorioFoto
@attribute [Authorize (Roles = "Administrador, Gerente")]
@inject IJSRuntime JS


<PageTitle>Cargar inmueble</PageTitle>

<EditForm FormName="a" Model="inmueble" OnValidSubmit="Cargar">
        <DataAnnotationsValidator />
        <ValidationSummary />
<label class="form-label">Cargar Inmueble</label>
<label class="form-label">Por favor, complete los siguientes campos:</label>
<label class="form-label">Nombre del Inmueble</label>
<input required=true type="text" @bind="inmueble.Nombre" placeholder="Nombre del Inmueble" class="form-control mb-2" />
<label class="form-label">Ciudad del Inmueble</label>
<input required=true type=" text" @bind="inmueble.Ciudad" placeholder="Ciudad del Inmueble" class="form-control mb-2" />

<label class="form-label">Dirección del Inmueble</label>
<input required=true type="text" @bind="inmueble.Direccion" placeholder="Dirección del Inmueble" class="form-control mb-2" />
<label class="form-label">Precio por día del Inmueble</label>
<input required=true type="number" @bind="inmueble.Precio" placeholder="Precio del Inmueble" class="form-control mb-2" />
<label class="form-label">Cantidad de camas del Inmueble</label>
<input required=true type="number" @bind="inmueble.CantidadDeCamas" placeholder="Cantidad de camas" class="form-control mb-2" />
<label class="form-label">Cantidad de baños del Inmueble</label>
<input required=true type="number" @bind="inmueble.Banios" placeholder="Cantidad de baños" class="form-control mb-2" />
<label for="type">Elija un tipo de inmueble:</label>

<select @bind=inmueble.TipoInmueble required=true name="cars" id="cars">
<option value=@TipoDeInmueble.Vivienda >Vivienda</option>
<option value="@TipoDeInmueble.Negocio">Negocio</option>
<option value="@TipoDeInmueble.Garaje">Garaje</option>
</select>



<p> Por favor, elija una ubicación en el mapa para el Inmueble con el marcador</p> 
 <div id="map" style="height: 400px; width: 80%;">

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB_9xydGamrZY4fHXdj39zwJPV-4FCUzbQ&callback=initializeMap" async
    defer></script>
<script>
    function initializeMap(dotNetHelper) {
        const initialPosition = { lat: -34.6037, lng: -58.3816 }; // Coordenadas de Buenos Aires

        const map = new google.maps.Map(document.getElementById("map"), {
            center: initialPosition,
            zoom: 12,
        });

        const marker = new google.maps.Marker({
            position: initialPosition,
            map: map,
            draggable: true,
        });

        // Actualizar coordenadas al mover el marcador
        marker.addListener("dragend", () => {
            const position = marker.getPosition();
            dotNetHelper.invokeMethodAsync('ActualizarCoordenadas', position.lat(), position.lng());
        });

        // Permitir al usuario colocar un nuevo marcador al hacer clic en el mapa
        map.addListener("click", (event) => {
            marker.setPosition(event.latLng);
            dotNetHelper.invokeMethodAsync('ActualizarCoordenadas', event.latLng.lat(), event.latLng.lng());
        });
    }

</script>
</div> 

<button type="submit" class="btn btn-primary" @onclick="() => Cargar()">Cargar Inmueble</button>
</EditForm>

<InputFile OnChange="CaptureFiles" multiple />
<button @onclick="GuardarFotos" class="btn btn-primary">Cargar Archivos</button>

@if (errores.Count > 0)
    {
        <div class="alert alert-danger">
            @foreach (var error in errores)
            {
                <p>@error</p>
            }
        </div>
    }

@code {
    Inmueble inmueble = new();
    public HttpContext? HttpContext { get; set; }

    private double Latitud { get; set; }
    private double Longitud { get; set; }
    private void Cargar()
    {
        inmueble.CoordLat = Latitud;
        inmueble.CoordLong = Longitud;
        CasoDeUsoAltaInmueble.Ejecutar(inmueble,RolUsuario.Gerente);
      persistirFotos(fotos, inmueble);
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeMap", dotNetRef);
        }


    }

    [JSInvokable]
    public void ActualizarCoordenadas(double lat, double lng)
    {
        Latitud = lat;
        Longitud = lng;
        StateHasChanged(); 
        // Actualizar la interfaz de usuario
        
    }

    private long maxFileSize = 1024 * 1024 * 5; // 5 MB
    private int maxAllowedFiles = 30;
    private List<String> errores = new();
    private List<Foto> fotos = new();

    private InputFileChangeEventArgs browser;

    
    private async Task GuardarFotos()
    {
        if (browser == null)
        {
            errores.Add("No se ha seleccionado ningún archivo.");
            return;
        }

        if (browser.FileCount > maxAllowedFiles)
        {
            errores.Add($"No se pueden cargar más de {maxAllowedFiles} archivos.");
            return;
        }
        errores.Clear();
        foreach(var file in browser.GetMultipleFiles(maxAllowedFiles))
        {
            try{
                if (file.Size > maxFileSize)
                {
                    errores.Add($"El archivo {file.Name} excede el tamaño máximo permitido de 5 MB y no se podrá agregar. Por favor elija otra foto");
                    return;

                }

                else{
                crearArchivo(file);
                }

            }
            catch (Exception ex)
            {
                errores.Add($"Error al cargar el archivo {file.Name}: {ex.Message}");
            }
        
    } }
    private async Task CaptureFiles(InputFileChangeEventArgs e)
    {
        browser = e;
        
    }

    private async void crearArchivo(IBrowserFile file)
    {
        string newFileName = Path.ChangeExtension(
                    Path.GetRandomFileName(), 
                    Path.GetExtension(file.Name));
                    
                var pathFotosInmuebles = Path.GetFullPath(
                    Path.Combine(
                        Directory.GetCurrentDirectory(),
                       "wwwroot", "images","fotosInmuebles"));

                Directory.CreateDirectory(pathFotosInmuebles);

                var path = Path.Combine(pathFotosInmuebles, newFileName);
        
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fotos.Add(new Foto
                {
                    Url = $"/images/fotosInmuebles/{newFileName}",
                });
    }

    public void persistirFotos(List<Foto> fotos, Inmueble inmueble)
    {
        fotos.ForEach(foto => foto.InmuebleId = inmueble.Id);
        RepositorioFoto.AgregarFotos(fotos);
    
    }
}
